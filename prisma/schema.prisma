generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum UserRole {
  mahasiswa
  dosen
  kaprodi
  super_admin
}

enum SubjectStatus {
  aktif
  arsip
}

enum AttendanceStatus {
  hadir
  alfa
  izin
}

enum GradeValue {
  A
  B_PLUS
  B
  C_PLUS
  C
  D
  E
}

enum SubmissionStatus {
  draft
  submitted
  graded
}

enum OfferingStatus {
  buka
  tutup
}

enum UploadType {
  file
  link
}

// User Model - untuk autentikasi dan manajemen pengguna
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String?   // Optional, digunakan untuk super admin
  role          UserRole
  image         String?   @db.Text  // Changed to Text to support large base64 images
  emailVerified DateTime?
  googleId      String?   @unique // Google OAuth ID
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  profile            Profile?
  phones             Phone[]
  scheduleEvents     ScheduleEvent[]
  reminders          Reminder[]
  krsItems           KrsItem[]
  grades             Grade[]
  submissions        Submission[]
  attendanceRecords  AttendanceRecord[]
  taughtSubjects     Subject[]          @relation("DosenSubjects")
  gradedSubmissions  Submission[]       @relation("GradedBy")
  activityLogs       ActivityLog[]
  accounts           Account[]
  sessions           Session[]
  
  @@index([email])
  @@index([role])
  @@map("users")
}

// Profile Model - informasi detail user
model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  nim       String?
  angkatan  Int
  kelas     String
  prodi     String?
  bio       String?  @db.Text
  website   String?
  avatarUrl String?  @db.Text  // Changed to Text to support large base64 images
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([nim])
  @@map("profiles")
}

// Phone Model - nomor telepon user
model Phone {
  id          String   @id @default(cuid())
  userId      String
  phoneNumber String
  isPrimary   Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("phones")
}

// Subject Model - mata kuliah
model Subject {
  id          String        @id @default(cuid())
  kode        String        @unique
  nama        String
  sks         Int
  semester    Int
  prodi       String?
  status      SubjectStatus @default(aktif)
  angkatan    Int
  kelas       String
  color       String        @default("#3B82F6")
  
  // Schedule default
  slotDay      Int?
  slotStartUTC Int?
  slotEndUTC   Int?
  slotRuang    String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  pengampus           User[]               @relation("DosenSubjects")
  offerings           CourseOffering[]
  assignments         Assignment[]
  materials           Material[]
  attendanceSessions  AttendanceSession[]
  scheduleEvents      ScheduleEvent[]
  krsItems            KrsItem[]
  grades              Grade[]
  reminders           Reminder[]
  
  @@index([kode])
  @@index([status])
  @@index([angkatan])
  @@map("subjects")
}

// CourseOffering Model - penawaran mata kuliah per kelas
model CourseOffering {
  id        String         @id @default(cuid())
  subjectId String
  angkatan  Int
  kelas     String
  semester  Int
  term      String?
  capacity  Int?
  status    OfferingStatus @default(buka)
  
  // Schedule default
  slotDay      Int?
  slotStartUTC Int?
  slotEndUTC   Int?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  subject  Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  krsItems KrsItem[]
  grades   Grade[]
  
  @@index([subjectId])
  @@index([angkatan])
  @@index([status])
  @@map("course_offerings")
}

// Assignment Model - tugas asynchronous
model Assignment {
  id                String   @id @default(cuid())
  subjectId         String
  title             String
  description       String?  @db.Text
  dueUTC            BigInt?
  allowedFileTypes  String[] @default([".pdf", ".doc", ".docx"])
  maxFileSize       Int      @default(10485760) // 10MB
  maxFiles          Int      @default(3)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  subject     Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  attachments FileAttachment[]
  submissions Submission[]
  
  @@index([subjectId])
  @@index([dueUTC])
  @@map("assignments")
}

// Submission Model - pengumpulan tugas mahasiswa
model Submission {
  id           String           @id @default(cuid())
  assignmentId String
  studentId    String
  note         String?          @db.Text
  submittedAt  BigInt
  status       SubmissionStatus @default(draft)
  grade        Float?
  feedback     String?          @db.Text
  gradedAt     BigInt?
  gradedBy     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  assignment Assignment         @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student    User               @relation(fields: [studentId], references: [id], onDelete: Cascade)
  grader     User?              @relation("GradedBy", fields: [gradedBy], references: [id])
  files      FileAttachment[]
  
  @@unique([assignmentId, studentId])
  @@index([assignmentId])
  @@index([studentId])
  @@index([status])
  @@map("submissions")
}

// FileAttachment Model - file attachment untuk tugas dan materi
model FileAttachment {
  id           String     @id @default(cuid())
  name         String
  url          String
  size         Int
  type         String
  uploadType   UploadType @default(file)
  uploadedAt   BigInt
  
  // Polymorphic relations
  assignmentId String?
  submissionId String?
  materialId   String?
  
  assignment Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  submission Submission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  material   Material?   @relation(fields: [materialId], references: [id], onDelete: Cascade)
  
  @@index([assignmentId])
  @@index([submissionId])
  @@index([materialId])
  @@map("file_attachments")
}

// Material Model - materi kuliah
model Material {
  id        String   @id @default(cuid())
  subjectId String
  title     String
  content   String?  @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  subject     Subject          @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  attachments FileAttachment[]
  
  @@index([subjectId])
  @@map("materials")
}

// AttendanceSession Model - sesi kehadiran
model AttendanceSession {
  id            String   @id @default(cuid())
  subjectId     String
  dateUTC       BigInt
  meetingNumber Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  subject Subject            @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  records AttendanceRecord[]
  
  @@index([subjectId])
  @@index([dateUTC])
  @@map("attendance_sessions")
}

// AttendanceRecord Model - record kehadiran per mahasiswa
model AttendanceRecord {
  id        String           @id @default(cuid())
  sessionId String
  studentId String
  status    AttendanceStatus @default(alfa)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  session AttendanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  student User              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([sessionId, studentId])
  @@index([sessionId])
  @@index([studentId])
  @@map("attendance_records")
}

// KrsItem Model - Kartu Rencana Studi
model KrsItem {
  id         String  @id @default(cuid())
  userId     String
  subjectId  String
  offeringId String?
  term       String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject  Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  offering CourseOffering? @relation(fields: [offeringId], references: [id], onDelete: SetNull)
  
  @@unique([userId, subjectId, term])
  @@index([userId])
  @@index([subjectId])
  @@index([term])
  @@map("krs_items")
}

// Grade Model - nilai mahasiswa
model Grade {
  id          String      @id @default(cuid())
  userId      String
  subjectId   String
  offeringId  String?
  term        String
  nilaiAngka  Float?
  nilaiHuruf  GradeValue?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject  Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  offering CourseOffering? @relation(fields: [offeringId], references: [id], onDelete: SetNull)
  
  @@unique([userId, subjectId, term])
  @@index([userId])
  @@index([subjectId])
  @@index([term])
  @@map("grades")
}

// ScheduleEvent Model - event jadwal
model ScheduleEvent {
  id          String  @id @default(cuid())
  userId      String
  subjectId   String?
  dayOfWeek   Int
  startUTC    Int
  endUTC      Int
  location    String?
  joinUrl     String?
  notes       String? @db.Text
  color       String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([subjectId])
  @@index([dayOfWeek])
  @@map("schedule_events")
}

// Reminder Model - pengingat
model Reminder {
  id               String   @id @default(cuid())
  userId           String
  title            String
  dueUTC           BigInt
  relatedSubjectId String?
  isActive         Boolean  @default(true)
  sendEmail        Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject Subject? @relation(fields: [relatedSubjectId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([dueUTC])
  @@index([isActive])
  @@map("reminders")
}

// ActivityLog Model - log aktivitas user
model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?  @db.Text
  category    String   // schedule, krs, reminder, subject, attendance, assignment, material, profile, password, other
  action      String   // created, updated, deleted, submitted, uploaded, completed
  icon        String   @default("Star")
  color       String   @default("text-gray-500")
  metadata    Json?    // Additional data in JSON format
  
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([category])
  @@index([createdAt])
  @@map("activity_logs")
}

// NextAuth Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Announcement model for super admin to broadcast information
model Announcement {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  imageUrl    String?  // URL to uploaded image
  fileUrl     String?  // URL to uploaded PDF
  targetRoles String[] // Array of roles: ["mahasiswa", "dosen", "kaprodi"]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  @@index([isActive, createdAt])
  @@map("announcements")
}

